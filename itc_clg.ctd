<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node unique_id="1" master_id="0" name="ITC" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1713007430" ts_lastsave="1713007823">
    <node unique_id="2" master_id="0" name="Synopsis" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1713007444" ts_lastsave="1713007454"/>
    <node unique_id="5" master_id="0" name="Implementation" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="52" is_bold="1" foreground="#c061cb" ts_creation="1713007823" ts_lastsave="1713016659">
      <rich_text>• </rich_text>
      <rich_text scale="h3"> dividing the image into blocks
• finding the lowest value in each block
• subtracting it from the rest of the values in the same block 
• then subtracting one from the odd number, 
• dividing all the values on two 
• finally applying the Huffman Coding technique to the block.</rich_text>
      <rich_text>
</rich_text>
      <codebox char_offset="280" justification="left" frame_width="95" frame_height="100" width_in_pixels="0" syntax_highlighting="python3" highlight_brackets="1" show_line_numbers="1">#!/bin/python

import numpy as np
import cv2
import re
from PIL import Image


def huffman_compression(my_string):
    shape = my_string.shape
    a = my_string
    print("Enetered string is:", my_string)
    my_string = str(my_string.tolist())

    letters = []
    only_letters = []
    for letter in my_string:
        if letter not in letters:
            frequency = my_string.count(letter)  # frequency of each letter repetition
            letters.append(frequency)
            letters.append(letter)
            only_letters.append(letter)

    nodes = []
    while len(letters) &gt; 0:
        nodes.append(letters[0:2])
        letters = letters[2:]  # sorting according to frequency
    nodes.sort()
    huffman_tree = []
    huffman_tree.append(nodes)  # Make each unique character as a leaf node

    def combine_nodes(nodes):
        pos = 0
        newnode = []
        if len(nodes) &gt; 1:
            nodes.sort()
            nodes[pos].append("1")  # assigning values 1 and 0
            nodes[pos + 1].append("0")
            combined_node1 = (nodes[pos][0] + nodes[pos + 1][0])
            combined_node2 = (nodes[pos][1] + nodes[pos + 1][1])  # combining the nodes to generate pathways
            newnode.append(combined_node1)
            newnode.append(combined_node2)
            newnodes = []
            newnodes.append(newnode)
            newnodes = newnodes + nodes[2:]
            nodes = newnodes
            huffman_tree.append(nodes)
            combine_nodes(nodes)
        return huffman_tree

    newnodes = combine_nodes(nodes)

    huffman_tree.sort(reverse=True)
    print("Huffman tree with merged pathways:")

    checklist = []
    for level in huffman_tree:
        for node in level:
            if node not in checklist:
                checklist.append(node)
            else:
                level.remove(node)
    count = 0
    for level in huffman_tree:
        print("Level", count, ":", level)  # print huffman tree
        count += 1
    print()

    letter_binary = []
    if len(only_letters) == 1:
        lettercode = [only_letters[0], "0"]
        letter_binary.append(lettercode * len(my_string))
    else:
        for letter in only_letters:
            code = ""
            for node in checklist:
                if len(node) &gt; 2 and letter in node[1]:  # genrating binary code
                    code = code + node[2]
            lettercode = [letter, code]
            letter_binary.append(lettercode)
    print(letter_binary)
    print("Binary code generated:")
    for letter in letter_binary:
        print(letter[0], letter[1])

    bitstring = ""
    for character in my_string:
        for item in letter_binary:
            if character in item:
                bitstring = bitstring + item[1]
    binary = "0b" + bitstring
    print("Your message as binary is:")
    # binary code generated
    uncompressed_file_size = len(my_string) * 7
    compressed_file_size = len(binary) - 2
    print("Your original file size was", uncompressed_file_size, "bits. The compressed size is:", compressed_file_size)
    print("This is a saving of ", uncompressed_file_size - compressed_file_size, "bits")
    output = open("compressed.bin", "w+")
    print("Compressed file generated as compressed.txt")
    output = open("compressed.bin", "w+")
    output.write(bitstring)
    output_list = [binary, letter_binary, shape, a]
    return output_list




def compress_image(image_path, block_size):
    # Read the image
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    # Get image dimensions
    height, width = img.shape

    # Define the size of each block
    block_height = height // block_size
    block_width = width // block_size

    # Create an empty compressed image array
    compressed_img = np.zeros((height, width), dtype=np.uint8)

    # Iterate through each block
    for i in range(block_height):
        for j in range(block_width):
            # Get the block coordinates
            block_x = j * block_size
            block_y = i * block_size

            # Extract the block from the original image
            block = img[block_y:block_y + block_size, block_x:block_x + block_size]

            # Find the lowest value in the block
            min_val = np.min(block)

            # Subtract the minimum value from all elements in the block
            block -= min_val

            # Subtract one from odd numbers
            block[block % 2 == 1] -= 1

            # Divide all values by two
            block //= 2

            # Update the compressed image with the modified block
            compressed_img[block_y:block_y + block_size, block_x:block_x + block_size] = block

    output = huffman_compression(compressed_img)

    return output

def decompress_image(compressed_img, block_size):
    # Get image dimensions
    height, width = compressed_img.shape

    # Define the size of each block
    block_height = height // block_size
    block_width = width // block_size

    # Create an empty decompressed image array
    decompressed_img = np.zeros((height, width), dtype=np.uint8)

    # Iterate through each block
    for i in range(block_height):
        for j in range(block_width):
            # Get the block coordinates
            block_x = j * block_size
            block_y = i * block_size

            # Extract the block from the compressed image
            block = compressed_img[block_y:block_y + block_size, block_x:block_x + block_size]

            # Multiply all values by two
            block *= 2

            # Add one to odd numbers
            block[block % 2 == 1] += 1

            # Restore the minimum value to all elements in the block
            min_val = np.min(block)
            block += min_val

            # Update the decompressed image with the restored block
            decompressed_img[block_y:block_y + block_size, block_x:block_x + block_size] = block

    return decompressed_img

def huffman_decompression(binary, letter_binary, shape, a):
    print("Decoding.......")
    bitstring = str(binary[2:])
    uncompressed_string = ""
    code = ""
    for digit in bitstring:
        code = code + digit
        pos = 0  # iterating and decoding
        for letter in letter_binary:
            if code == letter[1]:
                uncompressed_string = uncompressed_string + letter_binary[pos][0]
                code = ""
            pos += 1

    print("Your UNCOMPRESSED data is:")

    temp = re.findall(r'\d+', uncompressed_string)
    res = list(map(int, temp))
    res = np.array(res)
    res = res.astype(np.uint8)
    res = np.reshape(res, shape)
    print(res)
    print("Observe the shapes and input and output arrays are matching or not")
    print("Input image dimensions:", shape)
    print("Output image dimensions:", res.shape)
    # Decompression
    decompressed_img = decompress_image(res, block_size)
    data = Image.fromarray(decompressed_img)
    data.save('uncompressed.png')
    if a.all() == res.all():
        print("Success")
def display_image(image):
    # Display the image using OpenCV
    cv2.imshow('Decompressed Image', image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

# Example usage:
image_path = 'images.jpeg'
block_size = 27

# Compression
my_string = compress_image(image_path, block_size)
huffman_decompression(my_string[0], my_string[1], my_string[2], my_string[3])


</codebox>
    </node>
  </node>
</cherrytree>
